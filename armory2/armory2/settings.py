"""
Django settings for armory2 project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
import glob
import pdb

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ef23eil#4mb&+2k2^+^u73l=fda2y2+rrmx^td4e)*at7w%+0g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_q',
    'armory2.armory_main.apps.ArmoryMainConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'armory2.armory2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'armory2.armory2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASE MOVED TO ARMORY settings.py



# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# django_q stuff for API

Q_CLUSTER = {
    'name': 'armory',
    'workers': 8,
    'recycle': 500,
    'timeout': 60,
    'compress': True,
    'cpu_affinity': 1,
    'save_limit': 250,
    'queue_limit': 500,
    'label': 'Django Q',
    'redis': {
        'host': '127.0.0.1',
        'port': 6379,
        'db': 0, }
}

# Armory specific settings

if os.getenv("ARMORY_HOME"):
    ARMORY_CONFIG_FOLDER = os.getenv("ARMORY_HOME")
else:
    ARMORY_CONFIG_FOLDER = os.path.join(os.getenv("HOME"), ".armory")

if os.getenv("ARMORY_CONFIG"):
    ARMORY_CONFIG_FILE = os.getenv("ARMORY_CONFIG")
else:
    ARMORY_CONFIG_FILE = "settings.py"


if sys.version_info.major == 2:
    import imp

    module = imp.load_source(ARMORY_CONFIG_FOLDER, os.path.join(ARMORY_CONFIG_FOLDER, ARMORY_CONFIG_FILE))
else:
    import importlib.util

    spec = importlib.util.spec_from_file_location(
        ARMORY_CONFIG_FOLDER, os.path.join(ARMORY_CONFIG_FOLDER, ARMORY_CONFIG_FILE)
    )
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    
DATABASES = module.DATABASES

ARMORY_CONFIG = module.ARMORY_CONFIG

if not os.path.exists(ARMORY_CONFIG['ARMORY_BASE_PATH']):
    os.makedirs(ARMORY_CONFIG['ARMORY_BASE_PATH'])

# pdb.set_trace()


TEMPLATES[0]['DIRS'] += [f"{url}templates" for url in glob.glob(f"{BASE_DIR}/armory_main/included/webapps/*/")]

if ARMORY_CONFIG.get('ARMORY_CUSTOM_WEBAPPS'):

    templates = ARMORY_CONFIG['ARMORY_CUSTOM_WEBAPPS']

    for p in templates:
        template_paths = [f"{url}templates" for url in glob.glob(f"{p}/*/")]

        TEMPLATES[0]['DIRS'] += template_paths
        static_folders = [f"{url}static" for url in glob.glob(f"{p}/*/")]
    STATICFILES_DIRS = static_folders


# pdb.set_trace()
